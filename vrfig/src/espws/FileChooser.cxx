// $Id: FileChooser.cxx,v 1.3 2001-05-20 08:17:18 jle Exp $

// Originally generated by the Fast Light User Interface Designer (fluid)
// and manually adjusted for VR3 look and feel by Johannes Lehtinen.

//------------------------------------------------------------------------
// This widget is strongly based on the FileChooser widget of ESP
// Widget Set by Easy Software Products. It has been modified for
// the Agenda VR3 platform (a linux PDA) by Johannes Lehtinen.
//
// Copyright 1997-2000 by Easy Software Products
// Copyright 2001 Johannes Lehtinen
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//-------------------------------------------------------------------------

#include <string.h>
#include <iostream.h>
#include "FileChooser.h"
#include <FL/Fl_Bitmap.H>
#include <Flek/Fl_App_Window.H>
#include <Flek/Fl_Dockable_Window.H>
#include <flpda/Widget_Factory.h>

// -----------
// XBM bitmaps
// -----------

static unsigned char bits_up[] =
"\34\0""6\0\343\17\1\b1\by\b\375\b1\b1\b1\b\1\b\377\17";
static Fl_Bitmap bitmap_up(bits_up, 12, 12);

static unsigned char bits_new[] =
"\34\0""6\0\343\17\1\b1\b1\b\375\b\375\b1\b1\b\1\b\377\17";
static Fl_Bitmap bitmap_new(bits_new, 12, 12);

static unsigned char bits_allfiles[] =
"\377\17\1\ba\bi\t\361\b\375\13\375\13\361\bi\ta\b\1\b\377\17";
static Fl_Bitmap bitmap_allfiles(bits_allfiles, 12, 12);


// ------------------
// Callback functions
// ------------------

inline void FileChooser::cb_window_i(Fl_Window*, void*) {
  fileList->deselect();
  fileName->value("");
  window->hide();
}

void FileChooser::cb_window(Fl_Window* o, void* v) {
  ((FileChooser*)(o->user_data()))->cb_window_i(o,v);
}

inline void FileChooser::cb_fileList_i(FileBrowser*, void*) {
  fileListCB();
}

void FileChooser::cb_fileList(FileBrowser* o, void* v) {
  ((FileChooser*)(o->parent()->user_data()))->cb_fileList_i(o,v);
}

inline void FileChooser::cb_Cancel_i(Fl_Button*, void*) {
  fileList->deselect();
  fileName->value("");
  window->hide();
}

void FileChooser::cb_Cancel(Fl_Button* o, void* v) {
  ((FileChooser*)(o->parent()->user_data()))->cb_Cancel_i(o,v);
}

inline void FileChooser::cb_okButton_i(Fl_Button*, void*) {
  window->hide();
}

void FileChooser::cb_okButton(Fl_Button* o, void* v) {
  ((FileChooser*)(o->parent()->user_data()))->cb_okButton_i(o,v);
}

inline void FileChooser::cb_fileName_i(FileInput*, void*) {
  fileNameCB();
}

void FileChooser::cb_fileName(FileInput* o, void* v) {
  ((FileChooser*)(o->parent()->user_data()))->cb_fileName_i(o,v);
}

inline void FileChooser::cb_upButton_i(Fl_Button*, void*) {
  up();
}

void FileChooser::cb_upButton(Fl_Button* o, void* v) {
  ((FileChooser*)(o->parent()->user_data()))->cb_upButton_i(o,v);
}

inline void FileChooser::cb_newButton_i(Fl_Button*, void*) {
  newdir();
}

void FileChooser::cb_newButton(Fl_Button* o, void* v) {
  ((FileChooser*)(o->parent()->user_data()))->cb_newButton_i(o,v);
}

inline void FileChooser::cb_dirMenu_i(Fl_Choice*, void*) {
  char pathname[1024];
  int i;

  pathname[0] = '\0';
  for (i = 1; i <= dirMenu->value(); i ++)
    strcat(pathname, dirMenu->text(i));
  directory(pathname);
}

void FileChooser::cb_dirMenu(Fl_Choice* o, void* v) {
  ((FileChooser*)(o->parent()->user_data()))->cb_dirMenu_i(o,v);
}

inline void FileChooser::cb_allfiles_i(Fl_Button*, void*) {
  fileList->filter("*");
  rescan();
}

void FileChooser::cb_allfiles(Fl_Button* o, void* v) {
  ((FileChooser*)(o->parent()->user_data()))->cb_allfiles_i(o,v);
}


// ----------------------
// Method implementations
// ----------------------

// NOTE: The callbacks are a real kludge... They could be implemented
//       in a cleaner way if the whole source would be 'de-fluidified'.
FileChooser::FileChooser(
  const char *d, const char *p, int t, const char *title) {

  // Create the window
  Fl_App_Window *win = Widget_Factory::new_window(
    title ? title : "Pick a file");
  window = win;
  
  // Create the toolbar
  Fl_Dockable_Window *toolbar = Widget_Factory::new_toolbar();
  okButton = Widget_Factory::new_button(
    0, 0, "Ok", (Fl_Callback *)cb_okButton, this);
  okButton->parent()->callback((Fl_Callback *)cb_okButton, this);
  Widget_Factory::new_button(0, 0, "Cancel", (Fl_Callback *)cb_Cancel);
  toolbar->end();
  toolbar->callback((Fl_Callback *)cb_window, this);
  win->add_dockable(toolbar, 1);

  // Create directory choice and directory controls
  dirMenu = Widget_Factory::new_choice(
    55, 5, "Directory:", (Fl_Callback *)cb_dirMenu);
  dirMenu->resize(dirMenu->x(), dirMenu->y(),
                  window->w() - dirMenu->x() - 5, dirMenu->h());
  win->contents()->add(dirMenu);
  upButton = Widget_Factory::new_button(
    100, 25, 0, (Fl_Callback *)cb_upButton);
  upButton->resize(window->w() - 3*16 - 3*5, 
                   dirMenu->y() + dirMenu->h() + 5,
                   16, 16);
  bitmap_up.label(upButton);
  win->contents()->add(upButton);
  newButton = Widget_Factory::new_button(
    120, 25, 0, (Fl_Callback *)cb_newButton);
  newButton->resize(window->w() - 2*16 - 2*5, upButton->y(), 16, 16);
  bitmap_new.label(newButton);
  win->contents()->add(newButton);
  Fl_Button *allfiles_button = Widget_Factory::new_button(
    140, 25, 0, (Fl_Callback *)cb_allfiles);
  allfiles_button->resize(window->w() - 16 - 5, upButton->y(), 16, 16);
  bitmap_allfiles.label(allfiles_button);
  win->contents()->add(allfiles_button);

  // Create file name input
  fileName = new FileInput(
    5, window->h() - toolbar->h() - Widget_Factory::buttonheight() - 5, 
    window->w() - 10, Widget_Factory::buttonheight());
  fileName->callback((Fl_Callback *)cb_fileName);
  fileName->textsize(Widget_Factory::textsize());
  win->contents()->add(fileName);

  // Create file browser
  fileList = new FileBrowser(0, upButton->y() + upButton->h() + 5,
                             window->w(),
                             (fileName->y() - 5)
                             - (upButton->y() + upButton->h() + 5));
  fileList->type(2);
  fileList->textsize(Widget_Factory::textsize());
  fileList->callback((Fl_Callback *)cb_fileList);
  win->contents()->add(fileList);
  win->contents()->resizable(fileList);

  // Finish window construction
  win->contents()->callback((Fl_Callback *)cb_window, this);
  window->callback((Fl_Callback *)cb_window, this);
  window->set_modal();
  
  // Initialize state
  fileList->filter(p);
  type(t);
  value(d);
}

void FileChooser::color(Fl_Color c) {
  fileList->color(c);
}

Fl_Color FileChooser::color() {
  return (fileList->color());
}

char * FileChooser::directory() {
  return directory_;
}

void FileChooser::filter(const char *p) {
  fileList->filter(p);
  rescan();
}

const char * FileChooser::filter() {
  return (fileList->filter());
}

void FileChooser::hide() {
  window->hide();
}

void FileChooser::iconsize(uchar s) {
  fileList->iconsize(s);
}

uchar FileChooser::iconsize() {
  return (fileList->iconsize());
}

void FileChooser::label(const char *l) {
  window->label(l);
}

const char * FileChooser::label() {
  return (window->label());
}

void FileChooser::show() {
  window->show();
  fileList->deselect();
}

void FileChooser::textcolor(Fl_Color c) {
  fileList->textcolor(c);
}

Fl_Color FileChooser::textcolor() {
  return (fileList->textcolor());
}

void FileChooser::textfont(uchar f) {
  fileList->textfont(f);
}

uchar FileChooser::textfont() {
  return (fileList->textfont());
}

void FileChooser::textsize(uchar s) {
  fileList->textsize(s);
}

uchar FileChooser::textsize() {
  return (fileList->textsize());
}

void FileChooser::type(int t) {
  type_ = t;
  if (t == MULTI)
    fileList->type(FL_MULTI_BROWSER);
  else
    fileList->type(FL_HOLD_BROWSER);
  if (t != CREATE)
    newButton->deactivate();
  else
    newButton->activate();
}

int FileChooser::type() {
  return (type_);
}

int FileChooser::visible() {
  return window->visible();
}
