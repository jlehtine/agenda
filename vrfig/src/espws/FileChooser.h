// $Id: FileChooser.h,v 1.3 2001-05-20 08:17:18 jle Exp $

// Originally generated by the Fast Light User Interface Designer (fluid)
// and manually adjusted for VR3 look and feel by Johannes Lehtinen.

#ifndef __FileChooser_h_INCLUDED__
#define __FileChooser_h_INCLUDED__

//------------------------------------------------------------------------
// This widget is strongly based on the FileChooser widget of ESP
// Widget Set by Easy Software Products. It has been modified for
// the Agenda VR3 platform (a linux PDA) by Johannes Lehtinen.
//
// Copyright 1997-2000 by Easy Software Products
// Copyright 2001 Johannes Lehtinen
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//-------------------------------------------------------------------------

#include <FL/Fl.H>
#include <FL/Fl_Window.H>
#include <FL/Fl_Button.H>
#include <FL/Fl_Choice.H>
#include "FileBrowser.h"
#include "FileInput.h"

class FileChooser {

 private:

  Fl_Window *window;
  inline void cb_window_i(Fl_Window*, void*);
  static void cb_window(Fl_Window*, void*);
  FileBrowser *fileList;
  inline void cb_fileList_i(FileBrowser*, void*);
  static void cb_fileList(FileBrowser*, void*);
  inline void cb_Cancel_i(Fl_Button*, void*);
  static void cb_Cancel(Fl_Button*, void*);
  Fl_Button *okButton;
  inline void cb_okButton_i(Fl_Button*, void*);
  static void cb_okButton(Fl_Button*, void*);
  FileInput *fileName;
  inline void cb_fileName_i(FileInput*, void*);
  static void cb_fileName(FileInput*, void*);
  Fl_Button *upButton;
  inline void cb_upButton_i(Fl_Button*, void*);
  static void cb_upButton(Fl_Button*, void*);
  Fl_Button *newButton;
  inline void cb_newButton_i(Fl_Button*, void*);
  static void cb_newButton(Fl_Button*, void*);
  Fl_Choice *dirMenu;
  inline void cb_dirMenu_i(Fl_Choice*, void*);
  static void cb_dirMenu(Fl_Choice*, void*);
  inline void cb_allfiles_i(Fl_Button*, void*);
  static void cb_allfiles(Fl_Button*, void*);
  char directory_[1024];
  int type_;
  void fileListCB();
  void fileNameCB();
  void newdir();
  void up();

 public:
  enum { SINGLE, MULTI, CREATE };
  FileChooser(const char *d, const char *p, int t, const char *title);
  void color(Fl_Color c);
  Fl_Color color();
  int count();
  void directory(const char *d);
  char * directory();
  void filter(const char *p);
  const char * filter();
  void hide();
  void iconsize(uchar s);
  uchar iconsize();
  void label(const char *l);
  const char * label();
  void rescan();
  void show();
  void textcolor(Fl_Color c);
  Fl_Color textcolor();
  void textfont(uchar f);
  uchar textfont();
  void textsize(uchar s);
  uchar textsize();
  void type(int t);
  int type();
  const char *value(int f = 1);
  void value(const char *filename);
  int visible();
  
};

#endif
