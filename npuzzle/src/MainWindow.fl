# data file for the Fltk User Interface Designer (fluid)
version 1.0009 
header_name {.hpp} 
code_name {.cc} 
gridx 5 
gridy 5 
snap 3
decl {\#include <stdio.h>} {} 

class MainWindow {open
} {
  decl {PuzzleGame *game;} {}
  decl {InstructionsWindow *instr_win;} {}
  decl {AboutWindow *about_win;} {}
  Function {MainWindow()} {open
  } {
    code {instr_win = new InstructionsWindow();
about_win = new AboutWindow();} {}
    Fl_Window win {
      label NPuzzle open
      private xywh {1079 399 160 240} color 7 resizable visible
    } {
      Fl_Group {} {open
        xywh {0 0 160 25} box UP_BOX
      } {
        Fl_Box {} {
          label {clock.xbm}
          xywh {10 5 20 15} labeltype image
        }
        Fl_Output time_output {
          private xywh {30 5 40 15} align 0 textsize 10
          code0 {\#include "RightAlignedOutput.hpp"}
          class RightAlignedOutput
        }
        Fl_Box {} {
          label {move.xbm}
          xywh {85 5 20 15} labeltype image
        }
        Fl_Output moves_output {
          private xywh {105 5 40 15} align 0 textsize 10
          code0 {\#include "RightAlignedOutput.hpp"}
          class RightAlignedOutput
        }
        Fl_Box {} {
          xywh {155 0 5 25} resizable
        }
      }
      Fl_Box {} {
        label NPuzzle
        xywh {35 30 95 20} labelfont 1
      }
      Fl_Box puzzle_box {
        private xywh {10 55 140 160} color 7 resizable
        code0 {\#include "PuzzleBox.hpp"}
        class PuzzleBox
      }
      Fl_Group {} {open
        xywh {0 225 160 15} box UP_BOX
      } {
        Fl_Button {} {
          label Done
          callback {exit(0);}
          xywh {0 225 35 15} labelsize 10
        }
        Fl_Button {} {
          label New
          callback {PuzzleGame *old = game;
game = new PuzzleGame(old->get_size());
puzzle_box->set_game(game);
delete old;
update_moves();}
          xywh {35 225 35 15} labelsize 10
          code0 {\#include "PuzzleGame.hpp"}
        }
        Fl_Menu_Button {} {
          label Menu open
          xywh {70 225 35 15} labelsize 10
        } {
          menuitem {} {
            label About
            callback {about_win->show();}
            xywh {0 0 100 20} labelsize 10 divider
            code0 {\#include "AboutWindow.hpp"}
          }
          menuitem {} {
            label Instructions
            callback {instr_win->show();}
            xywh {0 0 100 20} labelsize 10
            code0 {\#include "InstructionsWindow.hpp"}
          }
          submenu {} {
            label {Tile labels} open
            xywh {0 0 100 20} labelsize 10
          } {
            menuitem {} {
              label Numbers
              callback {puzzle_box->set_alphabets(false);}
              xywh {0 0 100 20} labelsize 10
            }
            menuitem {} {
              label Letters
              callback {puzzle_box->set_alphabets(true);} selected
              xywh {0 0 100 20} labelsize 10
            }
          }
          submenu {} {
            label {Puzzle size} open
            xywh {0 0 100 20} labelsize 10
          } {
            menuitem {} {
              label 3x3
              callback {size_updated(3);}
              xywh {0 0 100 20} labelsize 10
            }
            menuitem {} {
              label 4x4
              callback {size_updated(4);}
              xywh {0 0 100 20} labelsize 10
            }
            menuitem {} {
              label 5x5
              callback {size_updated(5);}
              xywh {0 0 100 20} labelsize 10
            }
          }
        }
        Fl_Box {} {
          xywh {105 225 55 15} resizable
        }
      }
    }
    code {game = new PuzzleGame(4);
puzzle_box->set_game(game);} {}
    code {update_moves();} {}
  }
  Function {show()} {open return_type void
  } {
    code {win->show();} {}
  }
  Function {update_time()} {open return_type void
  } {
    code {int t = game->get_time();
int m = t / 60;
int s = t % 60;
char str[10];
sprintf(str, "%d:%02d", m, s);
time_output->value(str);
time_output->redraw();} {}
  }
  Function {update_moves()} {open return_type void
  } {
    code {char str[10];
sprintf(str, "%d", game->get_moves());
moves_output->value(str);
moves_output->redraw();} {}
  }
  Function {size_updated(int puzzle_size)} {open private return_type void
  } {
    code {if (game->get_size() != puzzle_size) {
  PuzzleGame *old = game;
  game = new PuzzleGame(puzzle_size);
  puzzle_box->set_game(game);
  delete old;
}
puzzle_box->redraw();
update_moves();} {}
  }
  Function {set_move_callback(void (*cb)())} {open return_type void
  } {
    code {puzzle_box->set_move_callback(cb);} {}
  }
} 
